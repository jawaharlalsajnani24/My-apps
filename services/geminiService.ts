
import { GoogleGenAI, Modality } from "@google/genai";

/**
 * Processes an image using the Gemini API to enhance it based on a prompt.
 * @param base64Image The base64-encoded image data.
 * @param mimeType The MIME type of the image.
 * @param prompt The text prompt to guide the image generation.
 * @returns A promise that resolves to the base64-encoded string of the processed image.
 */
export const processImage = async (base64Image: string, mimeType: string, prompt: string): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          { inlineData: { data: base64Image, mimeType: mimeType } },
          { text: prompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    if (response.candidates && response.candidates[0].content.parts) {
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData && part.inlineData.data) {
          return part.inlineData.data;
        }
      }
    }
    
    throw new Error("No image was generated by the API. The response may have been blocked.");

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to process the image. Please try again later.");
  }
};
